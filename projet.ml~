(****** Question 1 *******)

type aexpr = 
Const of int 
| Add of aexpr * aexpr
| Mult of aexpr * aexpr
| Minus of aexpr * aexpr
| Var of string  
;;



let rec calcul = function
  | Const n -> n
  | Mult (e1, e2) -> calcul e1 * calcul e2
  | Add (e1, e2) -> calcul e1 + calcul e2
  | Minus (e1, e2) -> calcul e1 - calcul e2
  | Var n -> int_of_string(n)
;;


(**Question 3: fonction qui transforme une express arithm
en une chaine de caractere parenthésée**)


let rec aexp_to_string expr =
  match expr with
  | Const x  ->  string_of_int(x)
  | Add (x,y) -> "("^ aexp_to_string x^" + "^ aexp_to_string y^")"
  | Minus (x,y) -> "("^aexp_to_string x^" + "^ aexp_to_string y^ ")"
  | Mult (x,y) -> "("^ aexp_to_string x^" + "^aexp_to_string y^ ")"
  | Var x -> x

;;


(****** Question 2 *******)
let expr1 = Const 2;; (** Pour 2 **)
let expr2 = Add(Const 2, Const 3);; (** Pour 2+3**)
let expr3 = Minus(Const 2, Const 5);; (** Pour 2-5 **)
let expr4 = Mult(Const 3, Const 6);; (** Pour 3*6 **)
let expr5 = Add(Const 2, Var ("x"));;(** Pour 2+x **)
let expr6 = Mult(Const 4, Var("y"));;(** Pour 4*y **)
let expr7 = Mult(Const 3, Mult(Var("x"), Var("x")));;(** Pour 3*x*x **)
let expr8 = Mult(Const 5, Add("x"), Mult(Const 7, Var "y"));;(** Pour 5*x+7*y**)
let expr9 = Mult(Const 6, Add(Var("x"), Mult(Const 5, Mult(Var("y"),Var("x")))));;(** Pour 6*x+5*y*x**)









let exprBis1 = Mult(Const x.4, 
                  Mult (Const y.3,
                     Mult(Const x.,
                        Mult(Const x.5,x.)
                          ))));;


let exprBis2 = Mult(Const 7. ,
                  Mult(Const y.6,
                    Mult(Const x.)));;

let expBis3 = Mult(Const 5. ,
                Mult(Const y.,
                  Mult(Const x.)));;


let Add (Const 2. , Add(exprBis1, Add(exprBis2, expBis3 )));;


calcul expr2;;
calcul expr3;;

let print_expr e =
  print_endline (aexp_to_string e);;
